<context>
# Overview  
交易复盘管理系统是一个基于 NestJS 的后端服务，专为交易者提供完整的交易记录、分析和复盘功能。系统采用 AWS 云架构，部署在 Lambda 上，支持真实交易和模拟交易的全生命周期管理。项目当前已完成核心功能开发，正在进行 Common 模块的全面增强以提升代码质量和开发效率。

# Core Features  
## 现有核心功能
- **用户管理**：基于 AWS Cognito 的用户注册、登录、认证系统，支持管理员功能
- **交易管理**：真实交易记录的 CRUD 操作、统计分析、复制功能，支持完整的交易生命周期
- **模拟训练**：模拟交易训练记录管理，为交易者提供安全的练习环境
- **图片管理**：基于 S3 + CloudFront 的交易图片上传和管理，支持预签名 URL
- **RAG 功能**：检索增强生成系统，提供智能文档处理和查询能力

## 待增强功能
- **统一响应格式**：标准化所有 API 的响应结构，提升前端集成体验
- **权限控制系统**：完整的角色和权限管理，支持细粒度访问控制
- **异常处理机制**：统一的错误处理和业务异常管理
- **API 文档标准化**：完善的 Swagger 文档和开发者体验
- **监控和日志系统**：结构化日志和性能监控

# User Experience  
## 目标用户
- **个人交易者**：需要专业交易复盘工具的独立交易者
- **小型交易团队**：需要团队协作和数据共享的交易组织
- **系统开发者**：维护和扩展系统功能的开发团队

## 核心用户流程
- **交易记录流程**：分析 → 入场 → 监控 → 离场 → 复盘分析
- **模拟训练流程**：策略制定 → 模拟执行 → 结果分析 → 策略优化
- **数据管理流程**：图片上传 → 数据关联 → 统计分析 → 报告生成

## UI/UX 考虑
- 移动端友好的响应式设计
- 基于 CDN 的快速图片加载
- 统一的错误提示和用户反馈
- 直观的数据可视化和统计报表
</context>
<PRD>
# Technical Architecture  
## 系统组件
- **应用层**：NestJS 框架，模块化架构设计
- **认证层**：AWS Cognito 用户池，JWT Token 验证
- **数据层**：DynamoDB 主数据库，S3 对象存储
- **网络层**：API Gateway REST API，CloudFront CDN
- **基础设施**：AWS Lambda 无服务器计算，AWS CDK 部署

## 数据模型
- **用户数据**：Cognito 用户池存储，支持角色分组
- **交易数据**：DynamoDB 表存储，按用户 ID 分区
- **模拟数据**：独立 DynamoDB 表，与真实交易隔离
- **图片数据**：S3 存储，按日期和用户组织路径
- **RAG 数据**：文档向量化存储，支持语义检索

## APIs 和集成
- **RESTful API**：标准化的 HTTP API 接口
- **AWS SDK**：DynamoDB、S3、Cognito 服务集成
- **JWT 认证**：无状态的令牌认证机制
- **预签名 URL**：安全的文件上传下载

## 基础设施要求
- **AWS 区域**：ap-southeast-1 (新加坡)
- **环境隔离**：dev 和 prod 环境完全分离
- **自动伸缩**：Lambda 自动扩缩容
- **数据安全**：服务端加密，HTTPS 强制

# Development Roadmap  
## 阶段一：Common 模块基础设施增强 (高优先级)
### 响应格式标准化
- 统一成功响应：`{ success: true, data: T, message?, timestamp }`
- 统一分页响应：包含 items 和 pagination 信息
- 统一错误响应：包含 error code、message 和 details
- 响应拦截器：自动转换现有 API 响应格式
- Swagger 装饰器：标准化 API 文档

### 异常处理增强
- 业务异常类：TradeException、UserException 等
- 异常过滤器：统一错误格式和日志记录
- 验证异常处理：友好的字段验证错误消息
- 多语言错误消息：国际化错误提示支持

### 用户信息装饰器
- @CurrentUser 装饰器：简化用户信息获取
- 用户接口定义：类型安全的用户信息结构
- 认证中间件增强：角色信息解析和缓存

## 阶段二：权限控制系统 (高优先级)
### 角色权限管理
- @Roles 装饰器：声明式角色权限控制
- @AdminOnly 装饰器：管理员专用功能标记
- 角色守卫：基于 Cognito 组的权限验证
- 权限缓存：减少重复的权限查询

### 认证系统增强
- JWT 解析优化：角色和权限信息提取
- 白名单机制：公开 API 的灵活配置
- 认证日志：详细的认证和授权日志记录

## 阶段三：开发体验优化 (中优先级)
### API 文档标准化
- @ApiStandardResponse：统一响应文档格式
- @ApiPaginatedResponse：分页响应文档模板
- @ApiErrorResponses：错误响应代码文档
- Swagger 主题：专业的 API 文档界面

### 验证和转换管道
- 查询验证管道：自动验证和转换查询参数
- 业务规则验证器：交易状态、日期范围等验证
- 类型转换管道：安全的数据类型转换
- 自定义验证装饰器：可复用的验证逻辑

### 分页和查询助手
- 分页助手工具：DynamoDB 分页查询适配
- @Paginated 装饰器：自动分页参数处理
- 查询构建器：动态查询条件构建
- 排序和过滤：标准化的数据查询接口

## 阶段四：监控和日志系统 (中优先级)
### 结构化日志
- Logger 服务：统一的日志管理服务
- 日志拦截器：自动请求和响应日志记录
- 审计日志：操作追踪和审计功能
- Lambda 日志优化：CloudWatch 友好的日志格式

### 性能监控
- 性能拦截器：API 响应时间和资源使用监控
- 数据库性能：DynamoDB 查询性能追踪
- 内存监控：Lambda 内存使用分析
- 告警机制：性能阈值告警设置

## 阶段五：高级功能扩展 (低优先级)
### 缓存系统
- @Cache 装饰器：方法级缓存功能
- 用户级缓存：个人化数据缓存策略
- 缓存失效：智能的缓存更新机制
- 分布式缓存：多实例缓存同步

### 安全增强
- 请求限流：API 调用频率限制
- 安全中间件：HTTP 安全头设置
- 输入清理：XSS 和注入攻击防护
- 数据脱敏：敏感信息的安全处理

# Logical Dependency Chain
## 基础设施优先级
1. **响应格式标准化** → 所有后续 API 开发的基础
2. **异常处理增强** → 错误处理机制必须先建立
3. **用户装饰器** → 权限控制的前置依赖
4. **权限控制系统** → 安全功能的核心基础

## 开发体验层
1. **API 文档标准化** → 可以与基础设施并行开发
2. **验证管道** → 依赖响应格式标准化
3. **分页助手** → 依赖验证管道和响应格式

## 监控和高级功能
1. **日志系统** → 可以在任何阶段集成
2. **性能监控** → 依赖日志系统
3. **缓存系统** → 依赖完整的 API 结构
4. **安全增强** → 依赖权限控制系统

## 快速可见性原则
- 第一阶段完成后即可看到统一的 API 响应格式
- 第二阶段完成后权限控制功能完全可用
- 每个阶段都是可独立部署和测试的原子功能

# Risks and Mitigations  
## 技术挑战
- **现有 API 兼容性**：通过响应拦截器实现向后兼容，渐进式迁移
- **性能影响**：拦截器和装饰器的性能开销可控，通过基准测试验证
- **Lambda 冷启动**：优化模块加载和依赖注入，减少启动时间

## MVP 实现策略
- **核心功能优先**：确保响应格式和异常处理优先完成
- **渐进式增强**：每个阶段都是可选的增强，不破坏现有功能
- **测试驱动**：每个新功能都要有对应的单元测试和集成测试

## 资源约束
- **开发时间**：6 周完整实施计划，可根据优先级调整
- **学习成本**：团队需要 1-2 天适应新的装饰器和模式
- **维护成本**：统一的架构实际上会降低长期维护成本

## 质量保证
- **代码审查**：所有新增功能需要代码审查
- **自动化测试**：集成测试覆盖新的装饰器和中间件
- **文档更新**：提供详细的使用指南和最佳实践

# Appendix  
## 现有代码结构
```
src/modules/
├── common/          # 通用模块（待增强）
├── user/           # 用户管理
├── trade/          # 交易管理  
├── image/          # 图片管理
└── rag/            # RAG 功能
```

## 技术规范
- **Node.js**: v22.x
- **NestJS**: v10.0.0
- **TypeScript**: v5.1.3
- **AWS CDK**: v2.195.0
- **测试框架**: Jest v29.5.0

## 部署环境
- **开发环境**: trading-app-dev
- **生产环境**: trading-app-prod
- **AWS 区域**: ap-southeast-1

## 性能目标
- **API 响应时间**: < 200ms (P95)
- **Lambda 冷启动**: < 1s
- **图片加载时间**: < 500ms (通过 CDN)
- **数据库查询**: < 100ms (P95)
</PRD>