<context>
# Overview  
Trade Backend 是一个基于 NestJS 的交易复盘管理系统后端服务，专为个人交易者和小型交易团队提供完整的交易记录、分析和复盘功能。系统采用 AWS 云架构，部署在 Lambda 上，支持真实交易和模拟交易的全生命周期管理。

# Core Features  
## 用户管理系统
- 基于 AWS Cognito 的用户注册、登录、认证
- JWT Token 验证机制
- 管理员权限管理
- 重要性：确保数据安全和用户隔离

## 交易记录管理
- 真实交易记录的 CRUD 操作
- 支持复制已有交易记录
- 月度统计和胜率计算
- 重要性：核心业务功能，帮助用户系统化记录交易

## 模拟训练系统
- 模拟交易记录管理
- 独立的练习环境
- 重要性：降低学习成本，提供安全的练习环境

## 图片管理系统
- 基于 S3 + CloudFront 的图片存储
- 预签名 URL 上传机制
- CDN 加速访问
- 重要性：支持交易截图和技术分析图表

# User Experience  
## 用户画像
- 个人交易者：需要专业工具进行交易复盘
- 小型交易团队：需要协作和数据分享功能

## 关键用户流程
1. 用户注册/登录 → 身份验证 → 访问系统
2. 创建交易记录 → 上传相关图片 → 添加分析备注
3. 查看历史记录 → 筛选和排序 → 统计分析
4. 模拟训练 → 练习交易决策 → 提升技能

## UI/UX 考虑
- 移动端友好设计
- 快速响应和流畅体验
- 直观的数据展示和分析界面
</context>
<PRD>
# Technical Architecture  
## 系统组件
- **应用层**：NestJS + TypeScript
- **部署层**：AWS Lambda + API Gateway
- **数据层**：DynamoDB (主数据库) + S3 (图片存储)
- **认证层**：AWS Cognito + JWT
- **CDN层**：CloudFront 全球加速

## 数据模型
- 用户表：通过 Cognito 管理
- 交易记录表：`{appName}-transactions-{env}`
- 模拟训练表：`{appName}-simulation-train-{env}`
- 图片存储：S3 按日期和用户ID组织

## APIs 和集成
- RESTful API 通过 API Gateway 暴露
- AWS SDK 集成各种云服务
- Swagger 文档自动生成

## 基础设施要求
- AWS CDK 基础设施即代码
- 支持 dev/prod 多环境部署
- 无服务器架构，按需付费

# Development Roadmap  
## 当前状态 (已完成)
- ✅ 核心用户认证系统
- ✅ 完整的交易记录 CRUD 功能
- ✅ 模拟训练系统基础功能
- ✅ 图片上传和管理系统
- ✅ AWS 基础设施部署
- ✅ API 文档和基础测试

## 第一阶段：功能增强和优化
- 高级筛选和搜索功能优化
- 批量操作功能 (批量删除、批量状态更新)
- 数据导入导出功能
- 交易统计报告增强 (更详细的分析图表)
- 性能优化 (DynamoDB 查询优化、Lambda 冷启动优化)

## 第二阶段：用户体验提升
- 实时数据同步机制
- 移动端 API 优化
- 推送通知系统
- 用户偏好设置
- 多语言支持
- 高级数据可视化

## 第三阶段：协作和分享功能
- 团队协作功能
- 交易记录分享机制
- 导师学员系统
- 社区功能基础
- 权限管理细化

## 第四阶段：智能分析
- AI 驱动的交易模式识别
- 智能风险评估
- 个性化建议系统
- 预测分析功能

# Logical Dependency Chain
## 基础设施层 (优先级最高)
1. 系统稳定性和错误处理机制完善
2. 监控和日志系统建立
3. 自动化测试覆盖率提升

## 核心功能层
1. 数据查询性能优化 (影响所有功能)
2. 批量操作功能 (提升用户效率)
3. 高级筛选功能 (依赖于数据结构优化)

## 用户体验层
1. API 响应结构标准化
2. 实时同步机制
3. 移动端适配优化

## 高级功能层
1. 协作功能 (依赖于权限系统)
2. 智能分析 (依赖于大量数据积累)

# Risks and Mitigations  
## 技术挑战
- **风险**：DynamoDB 查询性能在大数据量下的表现
- **缓解**：实施查询优化策略，考虑分页和索引优化

- **风险**：Lambda 冷启动延迟影响用户体验
- **缓解**：代码优化，考虑预热机制

## MVP 和迭代策略
- **风险**：功能范围过大，开发周期过长
- **缓解**：优先实现核心功能增强，分阶段交付

## 资源约束
- **风险**：AWS 成本控制
- **缓解**：监控使用情况，优化资源配置

# Appendix  
## 技术规范
- Node.js v22.x + NestJS v10.0.0
- TypeScript 5.1.3
- AWS CDK v2.195.0
- DynamoDB 单表设计模式

## 研究发现
- 用户对移动端体验要求较高
- 数据安全是用户的核心关切
- 需要平衡功能丰富性和易用性
</PRD>